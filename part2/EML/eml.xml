<?xml version="1.0" encoding="UTF-8"?>
<eml>
    <!-- eml tag: Root tag; Encloses all the data -->
    <unit name="Unit 1: HTML5 and CSS3">
        <!-- unit tag: repeating element; encloses all data related to a unit -->
        <intro>
            <!-- intro tag: provides an introduction to unit -->
            <paragraph>
                <!-- paragraph tag: contains paragraph of information -->
                In this unit we will discuss the basics of structuring and designing webpages using HTML and CSS.
                We also briefly touch on the fundamentals of the web.
            </paragraph>
        </intro>

        <topic name="Fundamentals of the Web">
            <!-- topic tag: repeating element; has a name attribute and contains information on a topic -->
            <intro>
                <!-- intro tag: provides an introduction to topic -->
                <paragraph>
                    The internet and world wide web are an integral part of our lives. Most web applications are built using a
                    client-server architecture.
                    <br />
                    A
                    <b>Web Server</b>
                    handles requests from a client. A
                    <b>Web Client</b>
                    sends requests to a destination web
                    server.
                    <br />
                    A good example of a web client is the current web app you are using or any webpage! A good example of a web
                    server or servers is the collection of servers at google's data center. Furthermore, applications can become
                    multitier. Therefore,
                    they may have a client side, server side and database.
                </paragraph>
            </intro>

            <subtopic name="Hyper Text Transfer Protocol (HTTP)">
                <!-- subtopic tag: repeating element; has a name attribute and contains information on a subtopic (section of a topic) -->
                <paragraph>
                    HTTP is the communication protocol between the client side and the web server. Most notably we can see HTTP
                        appear in browser's URL section (e.g. http:// or https://). HTTP is used to transfer HTML, css and Javascript
                        files required to handle and display webpages on the client side.
                    <br />
                    HTML defines the layout of the webpage. CSS defines the style of the webpage and modifies the layout to adhere
                        to
                        a desired look and feel. Javascript handles client side logic and events.
                    <br />

                </paragraph>
            </subtopic>

            <subtopic name="URI and URL">
                <paragraph>
                    Universal resource identifiers (URI) are used to identify resources on the internet. A special case of these
                        URIs is called a URL (Universal Resource Locator) that start with "http://" or "https://".
                    <break />
                    URLs are used to make server-side requests that my involve searching and database lookups.
                </paragraph>
            </subtopic>
            <subtopic name="Making and Receving Requests">
                <paragraph>
                    The two most common types of HTTP requests are GET and POST requests. GET requests are commonly used to perform
                    search
                    queries are fetch web pages. For instance you can perform a google search using a GET request which appends the
                    search query
                    to the URL and performs the search (e.g. "www.google.com/search?q=deitel").
                    POST requests are commonly used to submit data to a server. This request is commonly used in web forms, where
                    our responses are saved
                    using POST requests. POST requests send the data as part of the HTTP message and not as part of the URL. It's
                    more suitable to handle
                    larger data.            
                </paragraph>
            </subtopic>
        </topic>

        <topic name="Hyper Text Markup Language (HTML)">
            <intro>
                <paragraph>
                    HTML and in particular HTML5, is a markup language that defines thre structure and content of Web
                    documents that are rendered in the browser. HTMl files end with a .htm or .html extension.
				</paragraph>
            </intro>
            <!-- ////////////////////// Section 1 ////////////////////// -->
            <subtopic name="Simple Anatomy">
                <paragraph>
                    Consider the following code snippet for HTML5. (Taken from the textbook)
				</paragraph>
                <image source="../shared/images/part2/html5-snippet.png" description="html5-snippet" />
                <paragraph>
                    Line 1 indicates the document type which in this case would be HTML5.
                    The browser ignore blank or new lines in HTML5 and it's mainly for code readability.
                    Comments in HTML5 as you can see in lines 3 and 4, start with &lt;!-- and end with --&gt;.
                    In html we have opening tags (e.g. &lt;p&gt;) and closing tags (e.g. &lt;/ p&gt;).
                    Alternatively, there may be self closing tags (e.g. &lt;img /&gt;). Opening tags must
                    be complemented with a closing tag.
                    <br />
                    Every html file should contain an
                    <b>html</b>
                    ,
                    <b>head</b>
                    and
                    <b>body</b>
                    element.
                    In our example the html element starts at line 5 and ends at line 14. The head starts at line 6 and ends
                    at line 9. The body starts at line 11 and ends at line 13.
                    <br />
                    the html element is essentially the root element of the html file. All other elements or tags
                    are its children.
                    <br />
                    The head element contains information about the page such as the page title (line 8) and character set (line 7).
                    The head can also contain formatting instructions links such as link to a css file.
                    The body element contains all elements to be displayed on the webpage. For instance,
                    on line 12 we can see a paragraph element(&lt;p&gt;... &lt;/ p&gt;) inside the body element that is also
                    being rendered within the browser. You can also see the title being rendered on the browser tab as well.
                </paragraph>
            </subtopic>

            <subtopic name="Summary of HTML Terminology">
                <bulletlist>
                    <item>
                        <b>html tag:</b>
                        html elements that can contain other elements (e.g. &lt;p&gt;... &lt;/ p&gt;)
                        or can be self closing (e.g. &lt;img /&gt;).
                    </item>
                    <item>
                        <b>Child element:</b>
                        an html element that is contained inside another html element.
                    </item>
                    <item>
                        <b>Tag attributes: </b>
                        Properties that can be set for an html tag. For example, in the image
                        tag &lt;img src="" alt="" /&gt; the properties src and alt are attributes of the tag. You can set these
                        properties to specify the source of and give an alternate text placeholder to an image.
                    </item>
                </bulletlist>
            </subtopic>

            <subtopic name="Note Worthy Elements">
                <bulletlist>
                    <item>
                        <b>Unordered List:</b>
                        Useful for creating bullet points. For example
                        you can make an unorder list of fruites using the &lt;ul&gt; tag containing
                        &lt;li&gt; tags (list items):
                        <br />
                        &lt;ul&gt;
                        <br />
                        &#160;&lt;li&gt; Apple &lt;/ li&gt;
                        <br />
                        &#160;&lt;li&gt; Banana &lt;/ li&gt;
                        <br />
                        &#160;&lt;li&gt; Orange &lt;/ li&gt;
                        <br />
                        &lt;/ ul&gt;
                        <br />
                        <bulletlist>
                            <item>
                                Apple
                            </item>
                            <item>
                                Banana
                            </item>
                            <item>
                                Orange
                            </item>
                        </bulletlist>
                    </item>
                    <item>
                        <b>Paragraph:</b>
                        Useful for writing a large block of text.
                        starts with &lt;p&gt; and ends with &lt;/ p&gt;. These tags are highly used
                        throught out this project.
                    </item>
                    <item>
                        <b>Images:</b>
                        This element is useful for rendering images on a webpage.
                        You can specify the source of the image, alternate text and dimensions. For example,
                        <br />
                        &lt;img src="path/to/image" alt="some-image" width="200px" height="200px"/&gt;
                    </item>
                    <item>
                        <b>Anchor tags:</b>
                        This element is useful for linking to other pages. For example,
                        <br />
                        &lt;a href="../../part2/"&gt; resume &lt; /a&gt;, renders a link to my bookmark app:
                        <a href="../part1/"> BookMarks </a>
                    </item>
                    <item>
                        <b>Tables:</b>
                        This element is useful for displaying structured data onto a webpage.
                        For example, if I wanted to disable data related to a list of marks and names, I can use html table
                        to do so. The following table element illustrates an example:
                        <br />
                        &lt;table border="1"&gt;
                        <br />
                        &#160;&lt;thead&gt;
                        <br />
                        &#160;&#160;&lt;tr&gt;
                        <br />
                        &#160;&#160;&#160;&lt;th&gt;Name&lt;/ th&gt;
                        <br />
                        &#160;&#160;&#160;&lt;th&gt;Mark&lt;/ th&gt;
                        <br />
                        &#160;&#160;&lt; /tr&gt;
                        <br />
                        &#160;&lt;/ thead&gt;
                        <br />
                        &#160;&lt;tbody&gt;
                        <br />
                        &#160;&#160;&lt;tr&gt;
                        <br />
                        &#160;&#160;&#160;&lt;td&gt;Alireza Azimi&lt;/ td&gt;
                        <br />
                        &#160;&#160;&#160;&lt;td&gt;90&lt;/ td&gt;
                        <br />
                        &#160;&#160;&lt; /tr&gt;
                        <br />
                        &#160;&#160;&lt;tr&gt;
                        <br />
                        &#160;&#160;&#160;&lt;td&gt;John Doe&lt;/ td&gt;
                        <br />
                        &#160;&#160;&#160;&lt;td&gt;95&lt;/ td&gt;
                        <br />
                        &#160;&#160;&lt; /tr&gt;
                        <br />
                        &#160;&lt;/ tbody&gt;
                        <br />
                        &lt;/ table&gt;
                        <br />
                        This will render the following table:
                        <table>
                            <thead>
                                <tr>
                                    <th>
                                        Name
                                    </th>
                                    <th>
                                        Mark
                                    </th>
                                </tr>
                            </thead>
                            <tbody style="height:50px;">
                                <tr>
                                    <td>
                                        Alireza Azimi
                                    </td>
                                    <td>
                                        90
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        John Doe
                                    </td>
                                    <td>
                                        95
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </item>
                    <item>
                        <b>Inputs:</b>
                        html inputs are abundant and very useful in collecting and processing
                        user inputs. For the purposes of this tutorial here are 6 inputs that I would like to mention:
                        <bulletlist>
                            <item>
                                <b>Radio buttons:</b>
                                useful for designating an option.
                                <br />
                                e.g. &lt;input type="radio" name="fruit" &gt; Apple, which will render:
                                <br />
                                <input type="radio" name="fruite" />
                                Apple
                                <br />
                            </item>
                            <item>
                                <b>Checkbox:</b>
                                Useful for selecting multiple options.
                                e.g. &lt;input type="checkbox" name="favoriteSingers" &gt; Freddie Mercury, which will render:
                                <br />
                                <input type="checkbox" name="favoriteSingers" id="" />
                                Freddie Mercury
                                <br />
                            </item>
                            <item>
                                <b>Textarea: </b>
                                Usefule for taking larger blocks of texts.
                                <br />
                                You can specify number of lines and columns as well.
                                e.g. &lt;textarea name="feedback" cols="30" rows="5"&gt; Hello World! &lt;/textarea&gt;, which will
                                render:
                                <br />
                                <textarea name="feedback" cols="30" rows="5"> Hello World!</textarea>
                            </item>
                            <item>
                                <b>Datetime picker:</b>
                                Useful for inputting dates.
                                e.g. &lt;input type="date" name="birthday" &gt;, which will render:
                                <br />
                                <input type="date" name="birthday" />
                            </item>
                            <item>
                                <b>Password:</b>
                                Useful for inputting password and hiding characters.
                                <br />
                                e.g. &lt;input type="date" name="accountPass" value="predefinedPass"&gt;, which will render:
                                <br />
                                <input type="password" name="accountPass" value="predefinedPass" />
                            </item>
                            <item>
                                <b>Color palette:</b>
                                Useful for inputting colors to change themese for example.
                                <br />
                                e.g. &lt;input type="color" name="theme" &gt; Pick a color!, which will render:
                                <br />
                                <input type="color" name="theme" />
                                Pick a color!
                            </item>
                        </bulletlist>
                    </item>

                </bulletlist>
                <paragraph>
                    I would also like to invite you to take a look at w3schools' tutorial on input types:
                    <reference url="https://www.w3schools.com/html/html_form_input_types.asp">input types</reference>
                </paragraph>

            </subtopic>

        </topic>

        <topic name="Cascaded Style Sheet (CSS)">
            <intro>
                <paragraph>
                    Cascading style sheets or commonly refered to as CSS, is a technology designed to alter
                    the presentation and appearance of an html layout. CSS can be applied using inline attributes or
                    using class attributes referencing css classes either defined in a &lt;style&gt; tag or a style sheet
                    file. You can use css classes or attributes to alter colors, shapes, format borders and much more.
                </paragraph>
            </intro>

            <subtopic name="Simple Anatomy">
                <bulletlist>
                    <item>
                        <b>Inline CSS: </b>
                        This type of CSS is defined using the style attribute.
                        e.g. consider this anchor tag, &lt;a style="color:green;text-decoration:none;" href="#"&gt; Green Link
                        &lt;/a&gt;.
                        <br />
                        This element along with the style attribute render the following:
                        <br />
                        <a style="color:green;text-decoration:none;" href="#">Green Link</a>
                        <br />
                        The css values are separated using semicolmns. The color attribute changes the font Color
                        and the text-decoration attribute set to none removes all text formatting which in this case
                        removes the default underline that appears in anchor tag links.
                    </item>
                    <item>
                        <b>Infile and external CSS:</b>
                        The syntax for infile and external css is almost
                        identical. The only difference is, for infile, the css values are contained within a &lt;style&gt; tag
                        and for external the css is contained in a separate file and linked using a &lt;link&gt; tag. Here's an
                        example
                        of a link tag: &lt;link rel="stylesheet" href="style.css"/&gt;.
                        The following snippet of code illustrates how we can achieve the same green link from the previous
                        example using external or infile css.
                        <br />

                        <code>
                            a{
                            <br />
                            &#160;&#160;color: green;
                            <br />
                            &#160;&#160;text-decoration: none;
                            <br />
                            }
                            <br />
                        </code>
                        Over here the 'a' refers to anchor tags and thus it applies the following styles
                        in the curly braces to all anchor tags within the page. You can be more specific by specifying classes.
                        For example make a class called "green-anchor" and specify a style sheet with this class name:
                        <br />
                        <code>
                            .green-anchor{
                            <br />
                            &#160;&#160;color: green;
                            <br />
                            &#160;&#160;text-decoration: none;
                            <br />
                            }
                            <br />
                        </code>
                        Note how classes in css start with a period ".", and then the class name follows.
                        To apply this class to an element you can simply just use a class attribute.
                        e.g.
                        <a class=".green-anchor" href="#">Green Link</a>
                        will yield the same
                        green link we previously saw.
                    </item>

                </bulletlist>

                <paragraph>
                    You can always learn more about css at w3schools:
                    <reference url="https://www.w3schools.com/css/">css</reference>
                </paragraph>

            </subtopic>
        </topic>
        <summary>
            <!-- summary tag: provides summary for a unit -->
            <paragraph>
                In this Unit we learned about the basics of the internet from the point of view of the web. We discussed what is
                html, how it is structured and what uses does it have. We understood what are tags and what are child elements.
                We also did a brief overview of common html elements and some interesting html inputs.
                We took a look at cascaded style sheets and understood it's syntax and different formats.
                <br />
                <b>Congratulations on finishing this Unit!</b>
                When you are ready please take the quiz.
            </paragraph>
        </summary>

        <quiz title="Unit 1 Quiz">
            <!-- quiz tag: contains quiz information and title attribute for the quiz -->
            <question text="Multitier services consists of which of the following layers?">
                <!-- question tag: contains the question's information and text attribute for the question -->
                <ans correct="false">Database</ans>
                 <!-- ans tag: contains information about the answer and correct attribute indicating if it's correct -->
                <ans correct="false">Client</ans>
                <ans correct="false">Server</ans>
                <ans correct="true">All of the above</ans>
            </question>
            
            <question text="What does URI and URL stand for?">
                <ans correct="false">Universal Root Identifier, Universal Root Location</ans>
                <ans correct="false">Union Resource Information, Union Resource Location</ans>
                <ans correct="true">Universal Resource Identifier, Universal Resource Locator</ans>
                <ans correct="false">None of the above</ans>
            </question>
            <question text="Which of the following is a common HTTP request?">
                <ans correct="false">GET</ans>
                <ans correct="false">PUT</ans>
                <ans correct="false">POST</ans>
                <ans correct="true">a &amp; c</ans>
            </question>
            <question text="What does HTML stand for?">

                <ans correct="true">Hyper Text Markup Language </ans>
                <ans correct="false">Horizantal Text Model Language</ans>
                <ans correct="false">Hyper Transfer Markup Language</ans>
                <ans correct="false">None of the above</ans>
            </question>
            <question text="Which of the following is a closing HTML tag?">
                <ans correct="false">&lt; p &gt;</ans>
                <ans correct="true">&lt; / p &gt;</ans>
                <ans correct="false">&lt; html &gt;</ans>
                <ans correct="false">&lt; h2 &gt;</ans>
            </question>
            <question text="What does CSS stand for?">
                <ans correct="true">Cascaded Style Sheet</ans>
                <ans correct="false">Cascaded Style Surface</ans>
                <ans correct="false">Clear Surface Sheet</ans>
                <ans correct="false">Common Style Sheet</ans>
            </question>
            <question text="Using the style attribute is referred to as inline CSS.">
                <ans correct="true">True</ans>
                <ans correct="false">False</ans>
            </question>
            <question text="We want to style an anchor tag link so that it does not have an underline and it has a blue text. Which of the following inline CSS can achieve this?">
                <ans correct="false">style="color: green; text-decoration: none;"</ans>
                <ans correct="false">style="color: red; text-decoration: dashed;"</ans>
                <ans correct="false">style="color: blue; text-decoration: dashed;"</ans>
                <ans correct="true">style="color: blue; text-decoration: none;"</ans>
            </question>
        </quiz>
    </unit>
    <!-- UNIT 2  -->
    <unit name="Unit 2: Clientside Javascript">
        <intro>
            <paragraph>
                In this unit we will discuss the fundamentals of javascript as a client side side scripting language.
            </paragraph>
        </intro>
        <topic name="Javscript">
            <intro>
                <paragraph>
                    Javascript is essentially the standard clientside scripting language. So far we have learned about html and css.
                    These technologies allow us to render
                    visually stunning layouts and pages. However, our pages still miss a key ingredient. They are all static and
                    lack the dynamic and responsive side. Our html and css pages
                    essentially can't "do something". The solution to making our pages dynamic and have the ability to handle
                    various inputs and events is Javascript. Javascript allows are pages to come to life and
                    be responsive in the sense of handling events and responding to inputs.
                </paragraph>
            </intro>
            <subtopic name="Features of Javascript">
                <bulletlist>
                    <item>
                        <b>Window object:</b>
                        Window object essentially gives us access to the browser window. We can use this
                        to reload a browser window or detect when a window has loaded using "window.onload()".
                        We can also display alert messages on the browser using for exampe, "window.alert("This is an alert!");".
                    </item>
                    <item>
                        <b>DOM Manipulation:</b>
                        DOM stands for Document Object Model. Using javascript you can access the
                        document object. The document object is
                        an abstraction of a corrosponding rendered html document.
                        using dockument we can print out text using "document.writeline("Some String");" for example which prints
                        out the string to the body of the document.
                        We can also use dom objects in order to dynamically change their style. For instance, "domObject.style.color
                        = 'green'" is an illustration of what can be done.
                    </item>

                    <item>
                        <b>Case sensitive:</b>
                        Variables and methods in javascript are case sensitive. This is common in other
                        programming languages as well.
                    </item>

                    <item>
                        <b>Mathematical operations:</b>
                        Javascript supports multiple arithmetic operations such as +,-,/,*;
                        Other operations such as rounding down can also be performed using
                        the Math object. For example "Math.floor(1.43);".
                    </item>
                    <item>
                        <b>Case sensitive:</b>
                        Variables and methods in javascript are case sensitive. This is common in other
                        programming languages as well.
                    </item>
                    <item>
                        <b>String manipulation: </b>
                        Javascript supports string concatentaion and parsing. For instance,
                        you can concatenate two strings using the '+' operand. e.g. 'a' + 'b' will evaluate to 'ab'.
                    </item>
                    <item>
                        <b>Logical operations: </b>
                        Javascript supports essentially all logical operators, encompassing, OR
                        (||), AND (&amp;&amp;), equal (==), not equal (!=), greater than (>), less than (&lt;), etc.
                    </item>
                    <item>
                        <b>Loops: </b>
                        Javascript supports both while and for loops
                    </item>
                    <item>
                        <b>Implicit types: </b>
                        In Javascript data types are determined implicitely and we mainly worry about
                        variable scope using "var" and "let"; and variable immutability using "const".
                    </item>
                </bulletlist>
                <paragraph>
                    <b>Note:</b>
                    Javascript has two types of equal operator. Strict equal (===) and equal (==). Strict equal
                    is closer to what is seen other programming languages. Using normal equal (==) in javascript
                    should be considered with caution. For example "12" == 12 returns true even though one is a string and the other
                    is number.
                    <b>Note:</b>
                    Semi-columns are not necessary in JavaScript.
                </paragraph>
            </subtopic>
            <subtopic name="Functions">
                <paragraph>
                    Declaration of a function starts with the key word "function" followed by the function name, function parameters
                    in parenthesis and the function body wrapped in curly braces. The following figure
                    illustrates this format.
                    <br />
                    <code>
                        function function-name(parameter-list)
                        {
                        &#160;declarations and statements
                        }
                    </code>
                    <br />
                    Furthermore, there are also built in functions we can take advantage of. For instance using the built in math
                    object we can gegerate random numbers between 0 and 1 using
                    "Math.random();". We can round down using "Math.floor(number);". There are many useful built in functions and I
                    invite you to take a look at the
                    <reference url="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">Mozilla developer
                        docs</reference>
                    for this and more.
                </paragraph>
            </subtopic>
            <subtopic name="Handling Events">
                <paragraph>
                    There are two way to approach this. We can use inline event handlers or external event handlers that are
                    referenced using script tags.
                    Inline events can be referenced using attributes such as "onclick="eventHandler()"". Here "eventHandler()" is
                    the name of the javascript function
                    that is called when the element is clicked.
                    <br />
                    e.g. &lt;button onclick="handleClick()" &gt; Some button &lt;/ button&gt; calls handleClick(), where it can be
                    defined in a script tag or within a javascript file.
                    <br />
                    <code>
                        function handleClick()
                        {
                        &#160;window.alert("Clicked!");
                        }
                    </code>
                    <br />
                    For external event handlers, we need to use DOM extraction techniques to store DOM objects in javascript object
                    and attach an event handler to these objects.
                    For example, if our button has an id attribute, then we can use this id attribute to reference this element and
                    store it in a javascript object using a document query.
                    <br />
                    e.g. &lt;button id="specialButton" &gt; Some button &lt;/ button&gt;
                    <br />
                    We can handle click events with the following javascript snippet:
                    <br />
                    <code>
                        const buttonObject = document.getElementById("specialButton");
                        buttonObject.addEventListener("click", ()=> {
                            &#160;window.alert("Clicked!");
                        });
                    </code>
                </paragraph>
            </subtopic>
        </topic>
        <topic name="Canvas HTML5">
            <intro>
                <paragraph>
                    Canvas is a widely supported html5 element that provides a javascript API with methods that can
                    be used to draw 2 dimensional graphics, manipulating images, and inserting videos and images.
                    In fact canvas is used in part 3 of this project to create an image slide show. Feel free to take a closer a
                    look at it!
                </paragraph>
            </intro>
            <subtopic name="Drawing With Canvas">
                <paragraph>
                    Canvas uses a coordinate system where the x values refer to a horizontale distance from origin and y values
                    refer to vertical distance from origin. The following
                    figure (Taken from textbook) illustrates how canvas can be used to draw rectandles with different borders.
                </paragraph>
                <image source="../shared/images/part2/canvas-example.png" description="canvas-example" />
                <paragraph>
                    As we can see here the canvas has been styled with a border of 1px, solid and black. Inside the canvas we have
                    drawn
                    The rectangle's top left corner is on coordinate (5px, 10px) and it has a width of 200px and height of 75px.
                    For more on canvas and it's awesome use cases I invite you to take a look at w3schools tutorials on it:
                    <reference url="https://www.w3schools.com/html/html5_canvas.asp">canvas tutorial</reference>
                </paragraph>
            </subtopic>
        </topic>

        <summary>
            <paragraph>
                In this section we learned about javascript and it's key features. We learned how to handle events such as
                button clicks using javascript. Lasltly, we touched on the concept of canvas, which can be used
                for 2d graphical illustrations and image representations. Canvas is alse used in this project for the slideshow
                application.
                <br />
                <b>Congratulatins on finishing this Unit!</b>
                When you are ready please take the quiz.
            </paragraph>
        </summary>

        <quiz title="Unit 2 Quiz">
            <question text="Javascript is a client side scripting language.">
                <ans correct="true">True</ans>
                <ans correct="false">False</ans>
            </question>
            <question text="Semi-columns are necessary in Javascript.">
                <ans correct="false">True</ans>
                <ans correct="true">False</ans>
            </question>
            <question text="What does the expression Math.floor(2.86) evaluate to?">
                <ans correct="false">3</ans>
                <ans correct="false">0</ans>
                <ans correct="false">2.9</ans>
                <ans correct="true">2</ans>
            </question>
            <question text='What does the expression (87 == "87") evaluate to?'>
                <ans correct="true">true</ans>
                <ans correct="false">false</ans>
                <ans correct="false">87</ans>
                <ans correct="false">undefined</ans>
            </question>
            <question text='Which of the following is a valid function definition?'>
                <ans correct="true">function myFunc(){}</ans>
                <ans correct="false">function()</ans>
                <ans correct="false">(){}</ans>
                <ans correct="false">myFunc{}</ans>
            </question>
            <question text='Which of the following methods can be used to bind events to an element object?'>
                <ans correct="true">addEventListener()</ans>
                <ans correct="false">appendChild()</ans>
                <ans correct="false">cloneNode()</ans>
                <ans correct="false">focus()</ans>
            </question>
            <question text='Consider we draw a rectangle using a canvas context object: context.fillRect(5,5,100,75). What is the position of the top left corner in terms of (x,y)?'>
                <ans correct="false">(100,75)</ans>
                <ans correct="false">(5,100)</ans>
                <ans correct="true">(5,5)</ans>
                <ans correct="false">(5,75)</ans>
            </question>
        </quiz>
    </unit>
    <!-- UNIT 3  -->
    <unit name="Unit 3: AJAX and XML">
        <intro>
            <paragraph>
                In this unit we cover the basics of XML and AJAX. We discuss what they are and when they are useful. We will
                illustrate these technologies
                using examples as well.
            </paragraph>
        </intro>
        <topic name="XML">
            <intro>
                <paragraph>
                    The extensible markup language (XML) was developed by the W3C's xml working group. It is widely used an has become
                    the standard format for data exchanged between applications over
                    the internet.
                </paragraph>
            </intro>
            <subtopic name="Basic Anatomy">
                <paragraph>
                    Consider the following snippet of an XML document, designed to describe a baseball player's information (Taken
                    from textbook).
                </paragraph>
                <image source="../shared/images/part2/xml-snippet.png" description="canvas-example" />
                <bulletlist>
                    <item>
                        Line 1 declares the file to be an xml file
                    </item>
                    <item>
                        Lines 3 and 4 are comments which are identical to comments in html.
                    </item>
                    <item>
                        Text data is enclosed by start and end tags. For example lines 6 and 7. Every start tag must have a
                        corrosponding end tag.
                        e.g. &lt;firstName&gt; John &lt;/ firstName&gt;
                    </item>
                    <item>
                        An XML element may contain other XML elements and hence become more complex.
                    </item>
                    <item>
                        Every XML document must contain exactly one root element that contains all other elements.
                        Which is &lt;player&gt; in our example.
                    </item>
                </bulletlist>
                <paragraph>
                    XML docouments on its own are text files containing structured data.
                    They can be viewed in the browser without styling. Styling can also be added
                    using XSL (Extensible stylesheet language).
                </paragraph>
            </subtopic>
            <subtopic name="XML validation">
                <paragraph>
                    XML documents may reference Document Type Definition (DTD) or a schema document (XSD)
                    to validate the structure of an XML document. Some parsers use the schema or DTD to ensure the XML document
                    follow a
                    desired and defined structure. An XML document that conforms to a schema or DTD is considered valid.
                </paragraph>
            </subtopic>
            <subtopic name="XSL">
                <paragraph>
                    XSL (Extensible stylesheet language) tell the browser how to render and lay out the XML document.
                    XSL essentially maps XML values to html layout elements using xsl syntax. The following
                    snippet illustrates how xsl generates a web page for xml (sourced from textbook).
                </paragraph>
                <image source="../shared/images/part2/xsl-snippet.png" description="canvas-example" />
                <paragraph>
                    As you can see the document is an xsl document. But, we can also make out the familiar html elements as well.
                    xsl also enables us to make use of templates. Templates can be designated to match the name of an element
                    or root of the document (line 10). We can also use the xsl:for-each element for generating repeating elements in
                    a document.
                    <br />
                    To learn more about xml visit:
                    <reference url="https://www.w3schools.com/xml/">xml tutorial</reference>
                </paragraph>
            </subtopic>
        </topic>
        <topic name="AJAX">
            <intro>
                <paragraph>
                    Rich internet applications (RIAs) try to replicate the feeling and usability of desktop apps as much as
                    possible.
                    In order to make web apps more responsibe RIAs incorporate Asynchronous Javascript and XML (AJAX). AJAX calls
                    are asynchronous and therefore non-blocking.
                    They separate client-side user interface interaction from client server communications and emulate a parallel
                    run time environment. We can use AJAX calls
                    to make requests to servers and fetch their response using asynchronous callback functions. We can use these
                    callbacks to perform partial page updates and make our applications more
                    responsive and faster overall. The partial page updates help us to reduce the amount of page reloads as well.
                </paragraph>
            </intro>
            <subtopic name="Using AJAX">
                <paragraph>
                    To begin using AJAX we must make use of the XMLHttpRequest object. We can use this object to perform
                    a send request operation. Using the method "send()" we can make requests to a server for example.
                    We can use an event handler called "onreadystatechange" to detect when a response has been received from the server.
                    We can check the status of the response using the "status" attribute which is 200 for a success response.
                    The following code snippet illustrates how we can make a simple get request to a server using XMLHttpRequest:
                    <br />
                    <code>
                        var xhttp = new XMLHttpRequest();
                        xhttp.onreadystatechange = function() { 
                        &#160;if (this.readyState == 4 &amp;&amp; this.status == 200) {
                        &#160;&#160;document.getElementById("someId").innerHTML = xhttp.responseText;
                        &#160;}
                        };
                        xhttp.open("GET", "server-url", true); 
                        xhttp.send();
                    </code>
                </paragraph>
                <paragraph>
                    Note that "this.readState == 4" indicates the request has been fulfilled.
                    <br />
                    It's also worth mentioning that the jQuery library provides very useful wrappers for the AJAX APIs
                    that greatly simplify the development process for adding AJAX features to a webb application.
                    Lastly to learn more about AJAX, visit:
                    <reference url="https://www.w3schools.com/js/js_ajax_http.asp">AJAX Tutorial</reference>
                </paragraph>
            </subtopic>
        </topic>
        <summary>
            <paragraph>
                In this section we learned about xml, how to validate it's structure using xsd or DTD and how to style and
                present it using XSL.
                We discussed the importance and usefulness of xml in modern web applications. Finally, we also went over AJAX.
                We discussed it's importance and use cases along with looking at
                simple examples of how we can use AJAX methods to make our applications more responsive.
                <br />
                <b>Congratulations on finishing this Unit!</b>
                When you are ready please take the quiz.
            </paragraph>
        </summary>
        <quiz title="Unit 3 Quiz">
            <question text="XML is short for ... .">
                <ans correct="true">Extensible Markup Language</ans>
                <ans correct="false">External Markup Lanuage</ans>
                <ans correct="false">Event-driven Markup Language</ans>
                <ans correct="false">External Management Language</ans>
            </question>
            <question text="Every XML document must contain exactly one root element.">
                <ans correct="true">True</ans>
                <ans correct="false">False</ans>
            </question>
            <question text="XSD is used to validate the structure of an XML document.">
                <ans correct="true">True</ans>
                <ans correct="false">False</ans>
            </question>
            <question text="XSL is used to define the layout of an XML document in the browser.">
                <ans correct="true">True</ans>
                <ans correct="false">False</ans>
            </question>
            <question text="Rich internet applications try to replicate the feeling and usability of desktop apps as much as possible.">
                <ans correct="true">True</ans>
                <ans correct="false">False</ans>
            </question>
            <question text="What is AJAX short for?">
                <ans correct="false">Asynchronous Java and XML</ans>
                <ans correct="true">Asynchronous Javascript and XML</ans>
                <ans correct="false">Asymptotic Javascript and XML</ans>
                <ans correct="false">None of the above</ans>
            </question>
            <question text="What is the status code for http success response?">
                <ans correct="false">500</ans>
                <ans correct="false">400</ans>
                <ans correct="true">200</ans>
                <ans correct="false">300</ans>
            </question>
        </quiz>
    </unit>
</eml>